import Swal, { SweetAlertOptions } from 'sweetalert2';
import * as ɵngcc0 from '@angular/core';
export interface SwalPortalTarget {
    options?: SweetAlertOptions;
    element(swal: typeof Swal): HTMLElement | null;
}
/**
 * Represents an object of targets for <swal> portals (use with *swalPortal directive).
 * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is
 * shown, so this object lets us reference those functions safely and in a statically-typed manner.
 */
export declare class SwalPortalTargets {
    /**
     * Targets the modal close button block contents.
     */
    readonly closeButton: SwalPortalTarget;
    /**
     * Targets the modal title block contents.
     */
    readonly title: SwalPortalTarget;
    /**
     * Targets the modal text block contents (that is another block inside the first content block, so you can still
     * use other modal features like Swal inputs, that are situated inside that parent content block).
     */
    readonly content: SwalPortalTarget;
    /**
     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.
     * /!\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this
     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.
     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and
     *     performance of everyone, for a relatively rare use case.
     */
    readonly actions: SwalPortalTarget;
    /**
     * Targets the confirm button contents, replacing the text inside it (not the button itself)
     */
    readonly confirmButton: SwalPortalTarget;
    /**
     * Targets the deny button contents, replacing the text inside it (not the button itself)
     */
    readonly denyButton: SwalPortalTarget;
    /**
     * Targets the cancel button contents, replacing the text inside it (not the button itself)
     */
    readonly cancelButton: SwalPortalTarget;
    /**
     * Targets the modal footer contents.
     */
    readonly footer: SwalPortalTarget;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SwalPortalTargets, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC1wb3J0YWwtdGFyZ2V0cy5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInN3YWwtcG9ydGFsLXRhcmdldHMuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3dhbCwgeyBTd2VldEFsZXJ0T3B0aW9ucyB9IGZyb20gJ3N3ZWV0YWxlcnQyJztcbmV4cG9ydCBpbnRlcmZhY2UgU3dhbFBvcnRhbFRhcmdldCB7XG4gICAgb3B0aW9ucz86IFN3ZWV0QWxlcnRPcHRpb25zO1xuICAgIGVsZW1lbnQoc3dhbDogdHlwZW9mIFN3YWwpOiBIVE1MRWxlbWVudCB8IG51bGw7XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYW4gb2JqZWN0IG9mIHRhcmdldHMgZm9yIDxzd2FsPiBwb3J0YWxzICh1c2Ugd2l0aCAqc3dhbFBvcnRhbCBkaXJlY3RpdmUpLlxuICogV2UgbXVzdCB1c2UgdGh1bmtzIHRvIGFjY2VzcyB0aGUgU3dhbC4qIGZ1bmN0aW9ucyBsaXN0ZWQgYmVsb3csIGJlY2F1c2UgdGhleSBnZXQgY3JlYXRlZCBhZnRlciB0aGUgZmlyc3QgbW9kYWwgaXNcbiAqIHNob3duLCBzbyB0aGlzIG9iamVjdCBsZXRzIHVzIHJlZmVyZW5jZSB0aG9zZSBmdW5jdGlvbnMgc2FmZWx5IGFuZCBpbiBhIHN0YXRpY2FsbHktdHlwZWQgbWFubmVyLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTd2FsUG9ydGFsVGFyZ2V0cyB7XG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgbW9kYWwgY2xvc2UgYnV0dG9uIGJsb2NrIGNvbnRlbnRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNsb3NlQnV0dG9uOiBTd2FsUG9ydGFsVGFyZ2V0O1xuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIG1vZGFsIHRpdGxlIGJsb2NrIGNvbnRlbnRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRpdGxlOiBTd2FsUG9ydGFsVGFyZ2V0O1xuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIG1vZGFsIHRleHQgYmxvY2sgY29udGVudHMgKHRoYXQgaXMgYW5vdGhlciBibG9jayBpbnNpZGUgdGhlIGZpcnN0IGNvbnRlbnQgYmxvY2ssIHNvIHlvdSBjYW4gc3RpbGxcbiAgICAgKiB1c2Ugb3RoZXIgbW9kYWwgZmVhdHVyZXMgbGlrZSBTd2FsIGlucHV0cywgdGhhdCBhcmUgc2l0dWF0ZWQgaW5zaWRlIHRoYXQgcGFyZW50IGNvbnRlbnQgYmxvY2spLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbnRlbnQ6IFN3YWxQb3J0YWxUYXJnZXQ7XG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgYWN0aW9ucyBibG9jayBjb250ZW50cywgd2hlcmUgYXJlIHRoZSBjb25maXJtIGFuZCBjYW5jZWwgYnV0dG9ucyBpbiBhIG5vcm1hbCB0aW1lLlxuICAgICAqIC8hXFwgV0FSTklORzogdXNpbmcgdGhpcyB0YXJnZXQgZGVzdHJveXMgc29tZSBvZiB0aGUgbmF0aXZlIFN3ZWV0QWxlcnQyIG1vZGFsJ3MgRE9NLCB0aGVyZWZvcmUsIGlmIHlvdSB1c2UgdGhpc1xuICAgICAqICAgICB0YXJnZXQsIGRvIG5vdCB1cGRhdGUgdGhlIG1vZGFsIHZpYSA8c3dhbD4gQElucHV0cyB3aGlsZSB0aGUgbW9kYWwgaXMgb3Blbiwgb3IgeW91J2xsIGdldCBhbiBlcnJvci5cbiAgICAgKiAgICAgV2UgY291bGQgd29ya2Fyb3VuZCB0aGF0IGluY29udmVuaWVudCBpbnNpZGUgdGhpcyBpbnRlZ3JhdGlvbiwgYnV0IHRoYXQnZCBiZSBkZXRyaW1lbnRhbCB0byBtZW1vcnkgYW5kXG4gICAgICogICAgIHBlcmZvcm1hbmNlIG9mIGV2ZXJ5b25lLCBmb3IgYSByZWxhdGl2ZWx5IHJhcmUgdXNlIGNhc2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWN0aW9uczogU3dhbFBvcnRhbFRhcmdldDtcbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBjb25maXJtIGJ1dHRvbiBjb250ZW50cywgcmVwbGFjaW5nIHRoZSB0ZXh0IGluc2lkZSBpdCAobm90IHRoZSBidXR0b24gaXRzZWxmKVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbmZpcm1CdXR0b246IFN3YWxQb3J0YWxUYXJnZXQ7XG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgZGVueSBidXR0b24gY29udGVudHMsIHJlcGxhY2luZyB0aGUgdGV4dCBpbnNpZGUgaXQgKG5vdCB0aGUgYnV0dG9uIGl0c2VsZilcbiAgICAgKi9cbiAgICByZWFkb25seSBkZW55QnV0dG9uOiBTd2FsUG9ydGFsVGFyZ2V0O1xuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIGNhbmNlbCBidXR0b24gY29udGVudHMsIHJlcGxhY2luZyB0aGUgdGV4dCBpbnNpZGUgaXQgKG5vdCB0aGUgYnV0dG9uIGl0c2VsZilcbiAgICAgKi9cbiAgICByZWFkb25seSBjYW5jZWxCdXR0b246IFN3YWxQb3J0YWxUYXJnZXQ7XG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgbW9kYWwgZm9vdGVyIGNvbnRlbnRzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZvb3RlcjogU3dhbFBvcnRhbFRhcmdldDtcbn1cbiJdfQ==