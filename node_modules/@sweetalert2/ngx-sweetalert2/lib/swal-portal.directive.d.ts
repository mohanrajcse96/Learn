import { ApplicationRef, ComponentFactoryResolver, Injector, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { SwalPortalTarget, SwalPortalTargets } from './swal-portal-targets.service';
import { SwalComponent } from './swal.component';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
/**
 * A structural directive that lets you use Angular templates inside of SweetAlerts.
 * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but
 * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.
 * The default target is the alert text content zone.
 *
 * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):
 *
 *     @Component({ ... })
 *     export class MyComponent {
 *         public constructor(public readonly swalTargets: SwalPortalTargets) {
 *         }
 *     }
 *
 * Usage in the template:
 *
 *     <swal title="Fill the form" (confirm)="confirmHandler()">
 *         <!-- This form will be displayed as the alert main content
 *              Targets the alert's main content zone by default -->
 *         <form *swalPortal [formControl]="myForm">
 *             ...
 *         </form>
 *
 *         <!-- This targets the confirm button's inner content
 *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->
 *         <ng-container *swalPortal="swalTargets.confirmButton">
 *              Send ({{ secondsLeft }} seconds left)
 *         </ng-container>
 *     <swal>
 */
import * as ɵngcc0 from '@angular/core';
export declare class SwalPortalDirective implements OnInit, OnDestroy {
    private readonly resolver;
    private readonly injector;
    private readonly app;
    private readonly templateRef;
    private readonly sweetAlert2Loader;
    private readonly swalTargets;
    private readonly swalComponent;
    /**
     * Takes a portal target or nothing (then it will target the text content zone by default).
     *
     * See the {@link SwalPortalTargets} service to see the available targets.
     * See the class doc block for more informations.
     */
    target?: SwalPortalTarget;
    /**
     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.
     */
    private portalComponentRef?;
    private readonly destroyed;
    constructor(resolver: ComponentFactoryResolver, injector: Injector, app: ApplicationRef, templateRef: TemplateRef<any>, sweetAlert2Loader: SweetAlert2LoaderService, swalTargets: SwalPortalTargets, swalComponent: SwalComponent);
    /**
     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent
     * that will receive the consumer's template.
     */
    ngOnInit(): void;
    /**
     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the
     * parent SwalComponent events.
     */
    ngOnDestroy(): void;
    /**
     * This didRender hook runs 1..n times (per modal instance), just before the modal is shown (and also before the
     * {@link willOpenHook}), or after Swal.update() is called.
     * This is a good place to render, or re-render, our portal contents.
     */
    private didRenderHook;
    /**
     * This willOpen hook runs once (per modal instance), just before the modal is shown on the screen.
     * This is a good place to declare our detached view to the Angular app.
     */
    private willOpenHook;
    /**
     * This didDestroy hook runs once (per modal instance), just after the modal closing animation terminated.
     * This is a good place to detach and destroy our content, that is not visible anymore.
     */
    private didDestroyHook;
    /**
     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.
     */
    private createPortalComponent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SwalPortalDirective, [null, null, null, null, null, null, { host: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SwalPortalDirective, "[swalPortal]", never, { "target": "swalPortal"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC1wb3J0YWwuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInN3YWwtcG9ydGFsLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvblJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RvciwgT25EZXN0cm95LCBPbkluaXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTd2FsUG9ydGFsVGFyZ2V0LCBTd2FsUG9ydGFsVGFyZ2V0cyB9IGZyb20gJy4vc3dhbC1wb3J0YWwtdGFyZ2V0cy5zZXJ2aWNlJztcbmltcG9ydCB7IFN3YWxDb21wb25lbnQgfSBmcm9tICcuL3N3YWwuY29tcG9uZW50JztcbmltcG9ydCB7IFN3ZWV0QWxlcnQyTG9hZGVyU2VydmljZSB9IGZyb20gJy4vc3dlZXRhbGVydDItbG9hZGVyLnNlcnZpY2UnO1xuLyoqXG4gKiBBIHN0cnVjdHVyYWwgZGlyZWN0aXZlIHRoYXQgbGV0cyB5b3UgdXNlIEFuZ3VsYXIgdGVtcGxhdGVzIGluc2lkZSBvZiBTd2VldEFsZXJ0cy5cbiAqIFRoZXJlIGFyZSBkaWZmZXJlbnQgdGFyZ2V0YWJsZSB6b25lcyBwcm92aWRlZCBieSB7QGxpbmsgU3dhbFBvcnRhbFRhcmdldHN9OiB0aXRsZSwgY29udGVudCwgY29uZmlybUJ1dHRvbiwgZXRjLCBidXRcbiAqIHlvdSBjYW4gYWxzbyBtYWtlIHlvdXIgb3duIHRhcmdldCBieSBpbXBsZW1lbnRpbmcge0BsaW5rIFN3YWxQb3J0YWxUYXJnZXR9IGFuZCBnaXZpbmcgaXQgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKiBUaGUgZGVmYXVsdCB0YXJnZXQgaXMgdGhlIGFsZXJ0IHRleHQgY29udGVudCB6b25lLlxuICpcbiAqIFVzYWdlIGluIHlvdXIgY29tcG9uZW50J3MgVHlwZVNjcmlwdCAoaWYgeW91IHVzZSBhbm90aGVyIHRhcmdldCB0aGFuIHtAbGluayBTd2FsUG9ydGFsVGFyZ2V0cy5jb250ZW50fSk6XG4gKlxuICogICAgIEBDb21wb25lbnQoeyAuLi4gfSlcbiAqICAgICBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQge1xuICogICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHN3YWxUYXJnZXRzOiBTd2FsUG9ydGFsVGFyZ2V0cykge1xuICogICAgICAgICB9XG4gKiAgICAgfVxuICpcbiAqIFVzYWdlIGluIHRoZSB0ZW1wbGF0ZTpcbiAqXG4gKiAgICAgPHN3YWwgdGl0bGU9XCJGaWxsIHRoZSBmb3JtXCIgKGNvbmZpcm0pPVwiY29uZmlybUhhbmRsZXIoKVwiPlxuICogICAgICAgICA8IS0tIFRoaXMgZm9ybSB3aWxsIGJlIGRpc3BsYXllZCBhcyB0aGUgYWxlcnQgbWFpbiBjb250ZW50XG4gKiAgICAgICAgICAgICAgVGFyZ2V0cyB0aGUgYWxlcnQncyBtYWluIGNvbnRlbnQgem9uZSBieSBkZWZhdWx0IC0tPlxuICogICAgICAgICA8Zm9ybSAqc3dhbFBvcnRhbCBbZm9ybUNvbnRyb2xdPVwibXlGb3JtXCI+XG4gKiAgICAgICAgICAgICAuLi5cbiAqICAgICAgICAgPC9mb3JtPlxuICpcbiAqICAgICAgICAgPCEtLSBUaGlzIHRhcmdldHMgdGhlIGNvbmZpcm0gYnV0dG9uJ3MgaW5uZXIgY29udGVudFxuICogICAgICAgICAgICAgIE5vdGljZSB0aGUgdXNhZ2Ugb2YgbmctY29udGFpbmVyIHRvIGF2b2lkIGNyZWF0aW5nIGFuIHVzZWxlc3MgRE9NIGVsZW1lbnQgaW5zaWRlIHRoZSBidXR0b24gLS0+XG4gKiAgICAgICAgIDxuZy1jb250YWluZXIgKnN3YWxQb3J0YWw9XCJzd2FsVGFyZ2V0cy5jb25maXJtQnV0dG9uXCI+XG4gKiAgICAgICAgICAgICAgU2VuZCAoe3sgc2Vjb25kc0xlZnQgfX0gc2Vjb25kcyBsZWZ0KVxuICogICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAqICAgICA8c3dhbD5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3dhbFBvcnRhbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlc29sdmVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5qZWN0b3I7XG4gICAgcHJpdmF0ZSByZWFkb25seSBhcHA7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZW1wbGF0ZVJlZjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN3ZWV0QWxlcnQyTG9hZGVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3dhbFRhcmdldHM7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzd2FsQ29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFRha2VzIGEgcG9ydGFsIHRhcmdldCBvciBub3RoaW5nICh0aGVuIGl0IHdpbGwgdGFyZ2V0IHRoZSB0ZXh0IGNvbnRlbnQgem9uZSBieSBkZWZhdWx0KS5cbiAgICAgKlxuICAgICAqIFNlZSB0aGUge0BsaW5rIFN3YWxQb3J0YWxUYXJnZXRzfSBzZXJ2aWNlIHRvIHNlZSB0aGUgYXZhaWxhYmxlIHRhcmdldHMuXG4gICAgICogU2VlIHRoZSBjbGFzcyBkb2MgYmxvY2sgZm9yIG1vcmUgaW5mb3JtYXRpb25zLlxuICAgICAqL1xuICAgIHRhcmdldD86IFN3YWxQb3J0YWxUYXJnZXQ7XG4gICAgLyoqXG4gICAgICogSG9sZHMgdGhlIGNvbXBvbmVudCByZWZlcmVuY2Ugb2YgdGhlIGNvbnRyb2xsZWQgU3dhbFBvcnRhbENvbXBvbmVudCB0byBkZXN0cm95IGl0IHdoZW4gbm8gbG9uZ2VyIG5lZWRlZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHBvcnRhbENvbXBvbmVudFJlZj87XG4gICAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95ZWQ7XG4gICAgY29uc3RydWN0b3IocmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgaW5qZWN0b3I6IEluamVjdG9yLCBhcHA6IEFwcGxpY2F0aW9uUmVmLCB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Piwgc3dlZXRBbGVydDJMb2FkZXI6IFN3ZWV0QWxlcnQyTG9hZGVyU2VydmljZSwgc3dhbFRhcmdldHM6IFN3YWxQb3J0YWxUYXJnZXRzLCBzd2FsQ29tcG9uZW50OiBTd2FsQ29tcG9uZW50KTtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVzIHRvIHRoZSB0aGUgU3dlZXRBbGVydCBhcHBlYXJhbmNlL2Rpc2FwcGVhcmFuY2UgZXZlbnRzIHRvIGNyZWF0ZS9kZXN0cm95IHRoZSBTd2FsUG9ydGFsQ29tcG9uZW50XG4gICAgICogdGhhdCB3aWxsIHJlY2VpdmUgdGhlIGNvbnN1bWVyJ3MgdGVtcGxhdGUuXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTaWduYWwgYW55IHtAbGluayBkZXN0cm95ZWR9IGNvbnN1bWVyIHRoYXQgdGhpcyBpcyBvdmVyLCBzbyB0aGV5IGNhbiB1bnN1YnNjcmliZSBmcm9tIHRoZVxuICAgICAqIHBhcmVudCBTd2FsQ29tcG9uZW50IGV2ZW50cy5cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRoaXMgZGlkUmVuZGVyIGhvb2sgcnVucyAxLi5uIHRpbWVzIChwZXIgbW9kYWwgaW5zdGFuY2UpLCBqdXN0IGJlZm9yZSB0aGUgbW9kYWwgaXMgc2hvd24gKGFuZCBhbHNvIGJlZm9yZSB0aGVcbiAgICAgKiB7QGxpbmsgd2lsbE9wZW5Ib29rfSksIG9yIGFmdGVyIFN3YWwudXBkYXRlKCkgaXMgY2FsbGVkLlxuICAgICAqIFRoaXMgaXMgYSBnb29kIHBsYWNlIHRvIHJlbmRlciwgb3IgcmUtcmVuZGVyLCBvdXIgcG9ydGFsIGNvbnRlbnRzLlxuICAgICAqL1xuICAgIHByaXZhdGUgZGlkUmVuZGVySG9vaztcbiAgICAvKipcbiAgICAgKiBUaGlzIHdpbGxPcGVuIGhvb2sgcnVucyBvbmNlIChwZXIgbW9kYWwgaW5zdGFuY2UpLCBqdXN0IGJlZm9yZSB0aGUgbW9kYWwgaXMgc2hvd24gb24gdGhlIHNjcmVlbi5cbiAgICAgKiBUaGlzIGlzIGEgZ29vZCBwbGFjZSB0byBkZWNsYXJlIG91ciBkZXRhY2hlZCB2aWV3IHRvIHRoZSBBbmd1bGFyIGFwcC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHdpbGxPcGVuSG9vaztcbiAgICAvKipcbiAgICAgKiBUaGlzIGRpZERlc3Ryb3kgaG9vayBydW5zIG9uY2UgKHBlciBtb2RhbCBpbnN0YW5jZSksIGp1c3QgYWZ0ZXIgdGhlIG1vZGFsIGNsb3NpbmcgYW5pbWF0aW9uIHRlcm1pbmF0ZWQuXG4gICAgICogVGhpcyBpcyBhIGdvb2QgcGxhY2UgdG8gZGV0YWNoIGFuZCBkZXN0cm95IG91ciBjb250ZW50LCB0aGF0IGlzIG5vdCB2aXNpYmxlIGFueW1vcmUuXG4gICAgICovXG4gICAgcHJpdmF0ZSBkaWREZXN0cm95SG9vaztcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSB7QGxpbmsgU3dhbFBvcnRhbENvbXBvbmVudH0gYW5kIGdpdmVzIGl0IHRoZSBjdXN0b21lcidzIHRlbXBsYXRlIHJlZi5cbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZVBvcnRhbENvbXBvbmVudDtcbn1cbiJdfQ==