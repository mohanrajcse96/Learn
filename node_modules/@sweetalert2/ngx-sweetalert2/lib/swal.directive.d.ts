import { ComponentFactoryResolver, EventEmitter, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import Swal, { SweetAlertArrayOptions, SweetAlertOptions } from 'sweetalert2';
import { SwalComponent } from './swal.component';
/**
 * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:
 *
 * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:
 *
 *    <button [swal]="['Title', 'Text']">Click me</button>
 *
 * 2) A native SweetAlert2 options object, ex:
 *
 *    <button [swal]="{ title: 'Title', text: 'Text' }">Click me</button>
 *
 * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:
 *
 *    <button [swal]="mySwal">Click me</button>
 *    <swal #mySwal title="Title" text="Text"></swal>
 */
import * as ɵngcc0 from '@angular/core';
export declare class SwalDirective implements OnInit, OnDestroy {
    private readonly viewContainerRef;
    private readonly resolver;
    /**
     * SweetAlert2 options or a SwalComponent instance.
     * See the class doc block for more informations.
     */
    set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions);
    /**
     * Emits when the user clicks "Confirm".
     * The event value ($event) can be either:
     *  - by default, just `true`,
     *  - when using {@link input}, the input value,
     *  - when using {@link preConfirm}, the return value of this function.
     *
     * Example:
     *     <swal (confirm)="handleConfirm($event)"></swal>
     *
     *     public handleConfirm(email: string): void {
     *         // ... save user email
     *     }
     */
    readonly confirm: EventEmitter<any>;
    /**
     * Emits when the user clicks "Deny".
     * This event bears no value.
     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and
     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.
     *
     * Example:
     *     <swal (deny)="handleDeny()"></swal>
     *
     *     public handleDeny(): void {
     *     }
     */
    readonly deny: EventEmitter<void>;
    /**
     * Emits when the user clicks "Cancel", or dismisses the modal by any other allowed way.
     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when
     * the modal was programmatically closed (through {@link dismiss} for example).
     *
     * Example:
     *     <swal (dismiss)="handleDismiss($event)"></swal>
     *
     *     public handleDismiss(reason: DismissReason | undefined): void {
     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.
     *         // ... do something
     *     }
     */
    readonly dismiss: EventEmitter<Swal.DismissReason | undefined>;
    /**
     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object
     * options to it.
     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.
     */
    private swalRef?;
    /**
     * An instance of the <swal> component that this directive controls.
     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.
     */
    private swalInstance?;
    /**
     * Holds the native SweetAlert2 options.
     * Empty when the user passed an existing SwalComponent instance.
     */
    private swalOptions?;
    constructor(viewContainerRef: ViewContainerRef, resolver: ComponentFactoryResolver);
    /**
     * OnInit lifecycle handler.
     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm),
     * (deny) and (dismiss) outputs to reemit on the directive.
     */
    ngOnInit(): void;
    /**
     * OnDestroy lifecycle handler.
     * Destroys the dynamically-created SwalComponent.
     */
    ngOnDestroy(): void;
    /**
     * Click handler.
     * The directive listens for onclick events on its host element.
     * When this happens, it shows the <swal> attached to this directive.
     */
    onClick(event: MouseEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SwalDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SwalDirective, "[swal]", never, { "swal": "swal"; }, { "confirm": "confirm"; "deny": "deny"; "dismiss": "dismiss"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsic3dhbC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgU3dhbCwgeyBTd2VldEFsZXJ0QXJyYXlPcHRpb25zLCBTd2VldEFsZXJ0T3B0aW9ucyB9IGZyb20gJ3N3ZWV0YWxlcnQyJztcbmltcG9ydCB7IFN3YWxDb21wb25lbnQgfSBmcm9tICcuL3N3YWwuY29tcG9uZW50Jztcbi8qKlxuICogW3N3YWxdIGRpcmVjdGl2ZS4gSXQgdGFrZXMgYSB2YWx1ZSB0aGF0IGRlZmluZXMgdGhlIFN3ZWV0QWxlcnQgYW5kIGNhbiBiZSBvZiB0aHJlZSB0eXBlczpcbiAqXG4gKiAxKSBBIHNpbXBsZSBhcnJheSBvZiB0d28gb3IgdGhyZWUgc3RyaW5ncyBkZWZpbmluZyBbdGl0bGUsIHRleHQsIGljb25dIC0gdGhlIGljb24gYmVpbmcgb3B0aW9uYWwsIGV4OlxuICpcbiAqICAgIDxidXR0b24gW3N3YWxdPVwiWydUaXRsZScsICdUZXh0J11cIj5DbGljayBtZTwvYnV0dG9uPlxuICpcbiAqIDIpIEEgbmF0aXZlIFN3ZWV0QWxlcnQyIG9wdGlvbnMgb2JqZWN0LCBleDpcbiAqXG4gKiAgICA8YnV0dG9uIFtzd2FsXT1cInsgdGl0bGU6ICdUaXRsZScsIHRleHQ6ICdUZXh0JyB9XCI+Q2xpY2sgbWU8L2J1dHRvbj5cbiAqXG4gKiAzKSBBIHJlZmVyZW5jZSB0byBhbiBleGlzdGluZyBTd2FsQ29tcG9uZW50IGluc3RhbmNlIGZvciBtb3JlIGFkdmFuY2VkIHVzZXMsIGV4OlxuICpcbiAqICAgIDxidXR0b24gW3N3YWxdPVwibXlTd2FsXCI+Q2xpY2sgbWU8L2J1dHRvbj5cbiAqICAgIDxzd2FsICNteVN3YWwgdGl0bGU9XCJUaXRsZVwiIHRleHQ9XCJUZXh0XCI+PC9zd2FsPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTd2FsRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlc29sdmVyO1xuICAgIC8qKlxuICAgICAqIFN3ZWV0QWxlcnQyIG9wdGlvbnMgb3IgYSBTd2FsQ29tcG9uZW50IGluc3RhbmNlLlxuICAgICAqIFNlZSB0aGUgY2xhc3MgZG9jIGJsb2NrIGZvciBtb3JlIGluZm9ybWF0aW9ucy5cbiAgICAgKi9cbiAgICBzZXQgc3dhbChvcHRpb25zOiBTd2FsQ29tcG9uZW50IHwgU3dlZXRBbGVydE9wdGlvbnMgfCBTd2VldEFsZXJ0QXJyYXlPcHRpb25zKTtcbiAgICAvKipcbiAgICAgKiBFbWl0cyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBcIkNvbmZpcm1cIi5cbiAgICAgKiBUaGUgZXZlbnQgdmFsdWUgKCRldmVudCkgY2FuIGJlIGVpdGhlcjpcbiAgICAgKiAgLSBieSBkZWZhdWx0LCBqdXN0IGB0cnVlYCxcbiAgICAgKiAgLSB3aGVuIHVzaW5nIHtAbGluayBpbnB1dH0sIHRoZSBpbnB1dCB2YWx1ZSxcbiAgICAgKiAgLSB3aGVuIHVzaW5nIHtAbGluayBwcmVDb25maXJtfSwgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGlzIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiAgICAgPHN3YWwgKGNvbmZpcm0pPVwiaGFuZGxlQ29uZmlybSgkZXZlbnQpXCI+PC9zd2FsPlxuICAgICAqXG4gICAgICogICAgIHB1YmxpYyBoYW5kbGVDb25maXJtKGVtYWlsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgKiAgICAgICAgIC8vIC4uLiBzYXZlIHVzZXIgZW1haWxcbiAgICAgKiAgICAgfVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbmZpcm06IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHdoZW4gdGhlIHVzZXIgY2xpY2tzIFwiRGVueVwiLlxuICAgICAqIFRoaXMgZXZlbnQgYmVhcnMgbm8gdmFsdWUuXG4gICAgICogVXNlIGAoZGVueSlgIChhbG9uZyB3aXRoIHtAbGluayBzaG93RGVueUJ1dHRvbn0pIHdoZW4geW91IHdhbnQgYSBtb2RhbCB3aXRoIHRocmVlIGJ1dHRvbnMgKGNvbmZpcm0sIGRlbnkgYW5kXG4gICAgICogY2FuY2VsKSwgYW5kL29yIHdoZW4geW91IHdhbnQgdG8gaGFuZGxlIGNsZWFyIHJlZnVzYWwgaW4gYSBzZXBhcmF0ZSB3YXkgdGhhbiBzaW1wbGUgZGlzbWlzc2FsLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiAgICAgPHN3YWwgKGRlbnkpPVwiaGFuZGxlRGVueSgpXCI+PC9zd2FsPlxuICAgICAqXG4gICAgICogICAgIHB1YmxpYyBoYW5kbGVEZW55KCk6IHZvaWQge1xuICAgICAqICAgICB9XG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVueTogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHdoZW4gdGhlIHVzZXIgY2xpY2tzIFwiQ2FuY2VsXCIsIG9yIGRpc21pc3NlcyB0aGUgbW9kYWwgYnkgYW55IG90aGVyIGFsbG93ZWQgd2F5LlxuICAgICAqIFRoZSBldmVudCB2YWx1ZSAoJGV2ZW50KSBpcyBhIHN0cmluZyB0aGF0IGV4cGxhaW5zIGhvdyB0aGUgbW9kYWwgd2FzIGRpc21pc3NlZC4gSXQgaXMgYHVuZGVmaW5lZGAgd2hlblxuICAgICAqIHRoZSBtb2RhbCB3YXMgcHJvZ3JhbW1hdGljYWxseSBjbG9zZWQgKHRocm91Z2gge0BsaW5rIGRpc21pc3N9IGZvciBleGFtcGxlKS5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogICAgIDxzd2FsIChkaXNtaXNzKT1cImhhbmRsZURpc21pc3MoJGV2ZW50KVwiPjwvc3dhbD5cbiAgICAgKlxuICAgICAqICAgICBwdWJsaWMgaGFuZGxlRGlzbWlzcyhyZWFzb246IERpc21pc3NSZWFzb24gfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgICAgKiAgICAgICAgIC8vIHJlYXNvbiBjYW4gYmUgJ2NhbmNlbCcsICdvdmVybGF5JywgJ2Nsb3NlJywgJ3RpbWVyJyBvciB1bmRlZmluZWQuXG4gICAgICogICAgICAgICAvLyAuLi4gZG8gc29tZXRoaW5nXG4gICAgICogICAgIH1cbiAgICAgKi9cbiAgICByZWFkb25seSBkaXNtaXNzOiBFdmVudEVtaXR0ZXI8U3dhbC5EaXNtaXNzUmVhc29uIHwgdW5kZWZpbmVkPjtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSB1c2VyIGRvZXMgbm90IHByb3ZpZGVzIGEgU3dhbENvbXBvbmVudCBpbnN0YW5jZSwgd2UgY3JlYXRlIGl0IG9uLXRoZS1mbHkgYW5kIGFzc2lnbiB0aGUgcGxhaW4tb2JqZWN0XG4gICAgICogb3B0aW9ucyB0byBpdC5cbiAgICAgKiBUaGlzIGZpZWxkcyBrZWVwcyBhIHJlZmVyZW5jZSB0byB0aGUgZHluYW1pY2FsbHktY3JlYXRlZCA8c3dhbD4sIHRvIGRlc3Ryb3kgaXQgYWxvbmcgdGhpcyBkaXJlY3RpdmUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzd2FsUmVmPztcbiAgICAvKipcbiAgICAgKiBBbiBpbnN0YW5jZSBvZiB0aGUgPHN3YWw+IGNvbXBvbmVudCB0aGF0IHRoaXMgZGlyZWN0aXZlIGNvbnRyb2xzLlxuICAgICAqIENvdWxkIGJlIGFuIGluc3RhbmNlIHBhc3NlZCBieSB0aGUgdXNlciwgb3RoZXJ3aXNlIGl0J3MgdGhlIGluc3RhbmNlIHdlJ3ZlIGR5bmFtaWNhbGx5IGNyZWF0ZWQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzd2FsSW5zdGFuY2U/O1xuICAgIC8qKlxuICAgICAqIEhvbGRzIHRoZSBuYXRpdmUgU3dlZXRBbGVydDIgb3B0aW9ucy5cbiAgICAgKiBFbXB0eSB3aGVuIHRoZSB1c2VyIHBhc3NlZCBhbiBleGlzdGluZyBTd2FsQ29tcG9uZW50IGluc3RhbmNlLlxuICAgICAqL1xuICAgIHByaXZhdGUgc3dhbE9wdGlvbnM/O1xuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpO1xuICAgIC8qKlxuICAgICAqIE9uSW5pdCBsaWZlY3ljbGUgaGFuZGxlci5cbiAgICAgKiBDcmVhdGVzIGEgU3dhbENvbXBvbmVudCBpbnN0YW5jZSBpZiB0aGUgdXNlciBkaWRuJ3QgcHJvdmlkZWQgb25lIGFuZCBiaW5kcyBvbiB0aGF0IGNvbXBvbmVudCAoY29uZmlybSksXG4gICAgICogKGRlbnkpIGFuZCAoZGlzbWlzcykgb3V0cHV0cyB0byByZWVtaXQgb24gdGhlIGRpcmVjdGl2ZS5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uRGVzdHJveSBsaWZlY3ljbGUgaGFuZGxlci5cbiAgICAgKiBEZXN0cm95cyB0aGUgZHluYW1pY2FsbHktY3JlYXRlZCBTd2FsQ29tcG9uZW50LlxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2xpY2sgaGFuZGxlci5cbiAgICAgKiBUaGUgZGlyZWN0aXZlIGxpc3RlbnMgZm9yIG9uY2xpY2sgZXZlbnRzIG9uIGl0cyBob3N0IGVsZW1lbnQuXG4gICAgICogV2hlbiB0aGlzIGhhcHBlbnMsIGl0IHNob3dzIHRoZSA8c3dhbD4gYXR0YWNoZWQgdG8gdGhpcyBkaXJlY3RpdmUuXG4gICAgICovXG4gICAgb25DbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG59XG4iXX0=